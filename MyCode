
// File Name:	JavaSortingRoutines; SortingRoutines
// Programmer:	Maria Jackson
// Date:        17/05/2023
// Description:	This program demonstrates the basic use of various sorting  
//              routines to sort a randomized group of numbers.


// Package, Class, Import, and Memory Requirements

package jSortingRoutines;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import javax.swing.JOptionPane;

public class JavaSortingRoutines extends javax.swing.JFrame {
   
    
    // Intialize global booleans to trigger certain sorting routines
    boolean selection = false;
    boolean bubble = false;
    boolean insertion = false;
    boolean quick = false;
    
    boolean up = false;
    boolean down = false;
    
    
    // Creates new form called JavaSortingRoutines
    public JavaSortingRoutines() {
        initComponents();
    }

    
// FUNCTIONS
    
// Quick sort function
private void quickSort(ArrayList<Integer> list, int low, int high) {
if (low < high) {
    
    // Partition the list; obtain pivot index
    int pivotIndex = partition(list, low, high);
    
    // Recursively sort the section before the pivot index
    quickSort(list, low, pivotIndex - 1);
    
    // Recursively sort the section after the pivot index
    quickSort(list, pivotIndex + 1, high);
    }
}


// Partition function
private int partition(ArrayList<Integer> list, int low, int high) {
    
    // Select the pivot index
    int pivot = list.get(high);
    
    // Take index of the smaller element
    int i = low - 1;

     // Iterate through the section
    for (int j = low; j < high; j++) {
        
         // Swap elements if the current element is smaller than the pivot
        if (list.get(j) < pivot) {
            i++;
            swap(list, i, j);
        }
    }
    
    // Swap the pivot element with the correct element
    swap(list, i + 1, high);
    
    // Return pivot index
    return i + 1;
}


// Swap function
private void swap(ArrayList<Integer> list, int i, int j) {
    
     // Swap the elements at index i and j in the list
    int temp = list.get(i);
    list.set(i, list.get(j));
    list.set(j, temp);
}

    
    // NetBeans generated code for form design; not to be modified
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        sortRoutine = new javax.swing.ButtonGroup();
        sortOrder = new javax.swing.ButtonGroup();
        backgroundPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        prompt1 = new javax.swing.JLabel();
        selectionBtn = new javax.swing.JRadioButton();
        bubbleBtn = new javax.swing.JRadioButton();
        insertionBtn = new javax.swing.JRadioButton();
        quickBtn = new javax.swing.JRadioButton();
        prompt2 = new javax.swing.JLabel();
        ascenBtn = new javax.swing.JRadioButton();
        descenBtn = new javax.swing.JRadioButton();
        prompt3 = new javax.swing.JLabel();
        numTxt = new javax.swing.JTextField();
        sortBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        originalTxt = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        sortedTxt = new javax.swing.JTextArea();
        origLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        clearBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SortingRoutines");

        backgroundPanel.setBackground(new java.awt.Color(169, 227, 255));

        titleLabel.setFont(new java.awt.Font("Avenir Next", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("~ SORTING ROUTINES ~");

        prompt1.setFont(new java.awt.Font("Avenir Next", 1, 16)); // NOI18N
        prompt1.setForeground(new java.awt.Color(255, 255, 255));
        prompt1.setText("Select your preferred method:");

        sortRoutine.add(selectionBtn);
        selectionBtn.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        selectionBtn.setForeground(new java.awt.Color(255, 255, 255));
        selectionBtn.setText("Selection");
        selectionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionBtnActionPerformed(evt);
            }
        });

        sortRoutine.add(bubbleBtn);
        bubbleBtn.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        bubbleBtn.setForeground(new java.awt.Color(255, 255, 255));
        bubbleBtn.setText("Bubble");
        bubbleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bubbleBtnActionPerformed(evt);
            }
        });

        sortRoutine.add(insertionBtn);
        insertionBtn.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        insertionBtn.setForeground(new java.awt.Color(255, 255, 255));
        insertionBtn.setText("Insertion");
        insertionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertionBtnActionPerformed(evt);
            }
        });

        sortRoutine.add(quickBtn);
        quickBtn.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        quickBtn.setForeground(new java.awt.Color(255, 255, 255));
        quickBtn.setText("Quick");
        quickBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickBtnActionPerformed(evt);
            }
        });

        prompt2.setFont(new java.awt.Font("Avenir Next", 1, 16)); // NOI18N
        prompt2.setForeground(new java.awt.Color(255, 255, 255));
        prompt2.setText("Selected your prefered order:");

        sortOrder.add(ascenBtn);
        ascenBtn.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        ascenBtn.setForeground(new java.awt.Color(255, 255, 255));
        ascenBtn.setText("Ascending");
        ascenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascenBtnActionPerformed(evt);
            }
        });

        sortOrder.add(descenBtn);
        descenBtn.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        descenBtn.setForeground(new java.awt.Color(255, 255, 255));
        descenBtn.setText("Descending");
        descenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descenBtnActionPerformed(evt);
            }
        });

        prompt3.setFont(new java.awt.Font("Avenir Next", 1, 16)); // NOI18N
        prompt3.setForeground(new java.awt.Color(255, 255, 255));
        prompt3.setText("How many numbers would you like to sort?:");

        numTxt.setFont(new java.awt.Font("Avenir Next", 1, 15)); // NOI18N
        numTxt.setForeground(new java.awt.Color(169, 227, 250));

        sortBtn.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        sortBtn.setForeground(new java.awt.Color(93, 200, 246));
        sortBtn.setText("Sort Numbers");
        sortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortBtnActionPerformed(evt);
            }
        });

        originalTxt.setColumns(20);
        originalTxt.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        originalTxt.setForeground(new java.awt.Color(169, 227, 250));
        originalTxt.setRows(5);
        jScrollPane1.setViewportView(originalTxt);

        sortedTxt.setColumns(20);
        sortedTxt.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        sortedTxt.setForeground(new java.awt.Color(169, 227, 250));
        sortedTxt.setRows(5);
        jScrollPane2.setViewportView(sortedTxt);

        origLabel.setFont(new java.awt.Font("Avenir Next", 1, 13)); // NOI18N
        origLabel.setForeground(new java.awt.Color(255, 255, 255));
        origLabel.setText("Original Numbers:");

        jLabel1.setFont(new java.awt.Font("Avenir Next", 1, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Sorted Numbers:");

        clearBtn.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        clearBtn.setForeground(new java.awt.Color(93, 200, 246));
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 288, Short.MAX_VALUE)
                                .addComponent(prompt2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                                .addComponent(prompt3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(numTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prompt1)
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bubbleBtn)
                                    .addComponent(selectionBtn)
                                    .addComponent(insertionBtn)
                                    .addComponent(quickBtn))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descenBtn)
                            .addComponent(ascenBtn))
                        .addGap(158, 158, 158))))
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(titleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(origLabel))
                    .addComponent(sortBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(titleLabel)
                .addGap(37, 37, 37)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prompt2)
                    .addComponent(prompt1))
                .addGap(18, 18, 18)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ascenBtn)
                    .addComponent(selectionBtn))
                .addGap(18, 18, 18)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descenBtn)
                    .addComponent(bubbleBtn))
                .addGap(18, 18, 18)
                .addComponent(insertionBtn)
                .addGap(18, 18, 18)
                .addComponent(quickBtn)
                .addGap(24, 24, 24)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prompt3)
                    .addComponent(numTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(origLabel)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    
// Code for all buttons
    
// FOR GOING ABOVE AND BEYOND: per usual, used a try-catch block to ensure an 
// integer value is entered. Also used an if-else block to ensure all fields
// are adequately filled by the user before the program proceeds. I also added 
// a clear button for convinience. 
    
// "Sort Number" button code
    private void sortBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
    
    // Check if at least two booleans are not true
    if (!((selection && up) || (selection && down) || (bubble && up) ||
      (bubble && down) || (insertion && up) || (insertion && down)|| (quick && up) 
      || (quick && down))) {
        
    // Display an error message indicating that at least one sorting method/order must be selected
    JOptionPane.showMessageDialog(null, "Please select at least one sorting method and one sorting order.", "Error", JOptionPane.ERROR_MESSAGE);
    
    } else {
    // Try-catch block to ensure an integer value was entered
    try {
        
        // Tries to parse an integer from the user input 
        int listLength = Integer.parseInt(numTxt.getText());
        
        // Mutable strings for displaying the integers in a text box
        StringBuilder originalString = new StringBuilder();
        StringBuilder sortedString = new StringBuilder();
         
        // Initialize list variables; resets them after every use to ensure
        // a previous list doesn't get added onto
        ArrayList originalList = new ArrayList();
        ArrayList sortedList = new ArrayList();
        
        
        // GENERATE THE RANDOM NUMBERS AND PRINT ORGINAL BLOCK
   
        // Generate random numbers and add them to the original list
        Random random = new Random();
        for (int i = 0; i < listLength; i++) {
            int randomNumber = random.nextInt(2001) - 1000; // Generates a random number between -1000 and 1000
            originalList.add(randomNumber);
        }
           
        // Simple for loop through "originalList" that appends each integer and a 
        // new line to seperate them to the StringBuilder
        for (int i = 0; i < originalList.size(); i++) {
            originalString.append(originalList.get(i));
            originalString.append("\n");
        }
    
        // Output the generated list
        originalTxt.setText(originalString.toString());
        
        
        // SORTING METHODS BLOCK
        
        // Add original list to sorted list array for use
         sortedList.addAll(originalList); 
        
         
        // Selection Sorting; if seleciton boolean is true
        if( selection ){
            
            // Simple for loop to interate through the 
            for (int i = 0; i < sortedList.size() - 1; i++) {
                int minIndex = i;
                
                // Find the smallest value in the unsorted part of the list
                for (int j = i + 1; j < sortedList.size(); j++) {
                    if ((int) sortedList.get(j) < (int) sortedList.get(minIndex)) {
                        minIndex = j;
                    }   
                }
                
                // Swap the smallest value with the current value if they are different
                if (minIndex != i) {
                    int temp = (int) sortedList.get(i);
                    sortedList.set(i, sortedList.get(minIndex));
                    sortedList.set(minIndex, temp);
                }
            }
            
            // If down is true, sort the list in descending order 
            if (down){
                Collections.sort(sortedList, Collections.reverseOrder());
            }
            
            // Display the sorted list
            for (int i = 0; i < sortedList.size(); i++) {
                sortedString.append(sortedList.get(i));
                sortedString.append("\n");
            }

            // Output the sorted list
            sortedTxt.setText(sortedString.toString());
            
            
        // Quick sorting; if quick boolean is true
        } else if( quick ) {
            
            // Call the quickSort function to sort the list
            quickSort(sortedList, 0, sortedList.size() - 1);
    
            // Display the sorted list
            for (int i = 0; i < sortedList.size(); i++) {
                sortedString.append(sortedList.get(i));
                sortedString.append("\n");
            }
            
            // If down is true sort in descending order
            if (down){
                Collections.sort(sortedList, Collections.reverseOrder());
            }
            
            // Output the sorted list
            sortedTxt.setText(sortedString.toString());
        
            
        // Bubble sorting; if bubble boolean is true
        } else if( bubble ) {
            
            // Initalize new boolean
            boolean swapped;
            int n = sortedList.size();

            // Iterate through the list
            for (int i = 0; i < n - 1; i++) {
                swapped = false;

                // Compare the side by side elements and swap if neccessary
                for (int j = 0; j < n - i - 1; j++) {
                    if ((int) sortedList.get(j) > (int) sortedList.get(j + 1)) {
                        int temp = (int) sortedList.get(j);
                        sortedList.set(j, sortedList.get(j + 1));
                        sortedList.set(j + 1, temp);
                        swapped = true;
                    }
                }

                // If no elements were swapped in the inner loop, the array is already sorted
                if (!swapped) {
                    break;
                }
            }
            
            // If down is true, sort the list in descending order
            if (down){
                Collections.sort(sortedList, Collections.reverseOrder());
            }
            
            // Display the sorted list
            for (int i = 0; i < sortedList.size(); i++) {
                sortedString.append(sortedList.get(i));
                sortedString.append("\n");
            }

            // Output the sorted list
            sortedTxt.setText(sortedString.toString());
            
            
        // Insertion sorting; if insertion boolean is true
        } else if( insertion ) {
            
            // Iterate through the list starting from the second element
            for (int i = 1; i < sortedList.size(); i++) {
                int key = (int) sortedList.get(i);
                int j = i - 1;

                // Shift elements greater than the key to the right
                while (j >= 0 && (int) sortedList.get(j) > key) {
                    sortedList.set(j + 1, sortedList.get(j));
                    j--;
                }

                sortedList.set(j + 1, key);
                
            }

             // If down is true, sort the list in descending order
            if (down){
                Collections.sort(sortedList, Collections.reverseOrder());
            }
            
            // Display the sorted list
            for (int i = 0; i < sortedList.size(); i++) {
                sortedString.append(sortedList.get(i));
                sortedString.append("\n");
            }

            // Output the sorted list
            sortedTxt.setText(sortedString.toString());
        }
        
        
    // Catch any entry thats not a valid integer
    } catch (NumberFormatException ex) {
        
        // If the user enters anything but an integer, an error message is displayed
        // and the text fields are cleared for further input
        JOptionPane.showMessageDialog(null, "Invalid input - only integer values are accepted.", "Error", JOptionPane.ERROR_MESSAGE);
        numTxt.setText("");
    }            
    }
    }                                       

    
// "Selection" button code
    private void selectionBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
        
    // Set selection to true if clicked and everything else false
    selection = true;
    bubble = false;
    insertion = false;
    quick = false;
        
    }                                            

 
// "Bubble" button code
    private void bubbleBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
     
    // Set bubble to true if clicked and everything else false
    selection = false;
    bubble = true;
    insertion = false;
    quick = false;  
          
    }                                         

    
// "Insertion" button code
    private void insertionBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
        
    // Set insertion to true if clicked and everything else false
    selection = false;
    bubble = false;
    insertion = true;
    quick = false;
    
    }                                            

    
// "Quick" button code
    private void quickBtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
     
    // Set quick to true if clicked and everything else false
    selection = false;
    bubble = false;
    insertion = false;
    quick = true;  
        
    }                                        

    
// "Ascending" button code
    private void ascenBtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
       
    // Set up to true and down to false
    up = true;
    down = false;  
        
    }                                        

    
// "Descending" button code
    private void descenBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
     
    // Set down to true and up to false
    up = false;
    down = true; 
    
    }                                         


// "Clear" button code
    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
    // Just set all text fields to empty strings
    numTxt.setText("");
    originalTxt.setText("");
    sortedTxt.setText("");
    
    }                                        

    
    // NetBeans generated code, @param args the command line arguments 
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JavaSortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JavaSortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JavaSortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JavaSortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JavaSortingRoutines().setVisible(true);
            }
        });
    }

    
// NetBeans generated variables; not to be modfied   
    // Variables declaration - do not modify                     
    private javax.swing.JRadioButton ascenBtn;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JRadioButton bubbleBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JRadioButton descenBtn;
    private javax.swing.JRadioButton insertionBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField numTxt;
    private javax.swing.JLabel origLabel;
    private javax.swing.JTextArea originalTxt;
    private javax.swing.JLabel prompt1;
    private javax.swing.JLabel prompt2;
    private javax.swing.JLabel prompt3;
    private javax.swing.JRadioButton quickBtn;
    private javax.swing.JRadioButton selectionBtn;
    private javax.swing.JButton sortBtn;
    private javax.swing.ButtonGroup sortOrder;
    private javax.swing.ButtonGroup sortRoutine;
    private javax.swing.JTextArea sortedTxt;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration                   
}

// End of Code
